dat2 <- read.csv("eventmetrics2.csv")
inactive_sites <- read_excel("RFC-2373-inactive-site-list.xlsx")
dat <- rbind(dat1, dat2)
dat1 <- dat2 <- NULL
# drop unused cols
dat <- dat[, c("id", "lcecSiteId", "processorId", "campaignId", "eventTypeEnum",
"scheduledFor", "executedAt", "milliseconds" )]
# Fix date cols
dat$executedAt <- gsub("^(.{10} [0-9][0-9]:[0-9][0-9])$", "\\1:00", dat$executedAt)
dat$executedAt <- strptime(dat$executedAt, format = "%d-%m-%Y %H:%M:%S", tz = "America/Los_Angeles")
dat$scheduledFor <- gsub("^(.{10} [0-9][0-9]:[0-9][0-9])$", "\\1:00", dat$scheduledFor)
dat$scheduledFor <- strptime(dat$scheduledFor, format = "%d-%m-%Y %H:%M:%S", tz = "America/Los_Angeles")
## add index col
dat <- dat %>%
mutate(index1 = row.names(dat), .before = 1)
#######################
# add queue_type col
#######################
events_critical <- c("welcomeEmail", "reminderEmail", "driveAssignment", "eptest1", "drive assignment retry", "reviewerReminderEmail", "reminder email series", "campaignDailyMailDelivery", "thankYouEmail", "campaignHourlyMailDelivery", "correctSubmissionEmail")
events_secondary <- c("reportDeliver", "driveAssignmentValidate", "eptest2", "notifyNearStart", "notifyNearDue", "notifyNearClose", "notifyClosed", "validateAnnouncementRecipients", "validateReminderRecipients", "bulkload poll", "reportNow", "driveAssignmentValidateReport", "validateReviewerReminderRecipients", "validateCorrectSubmissionRecipients", "reminderEmailRetry", "welcomeEmailRetry", "reviewerReminderEmailRetry", "correctSubmissionEmailRetry", "validateAnnouncementRecipientsUseAssignmentRules", "validateReminderRecipientsUseAssignmentRules", "VariableWelcomeEmailRetry", "VariableReminderEmailRetry", "VariableReviewerReminderEmailRetry", "VariableCorrectSubmissionReminderEmailRetry", "FailedEmailDeliveryReport", "CumulativeEmailRetry", "supervisorEmail")
events_tertiary <- c("lyris poll", "lyris gc", "monitor", "dailyAdminEmail", "unitTest", "dailyLogRotation", "computeCampaignProgress", "computeLicenseReports", "eptest3", "ContractModulesExceeded")
dat$queue_type <- case_when(
dat$eventTypeEnum %in% events_critical ~ "critical",
dat$eventTypeEnum %in% events_secondary ~ "secondary",
dat$eventTypeEnum %in% events_tertiary ~ "tertiary")
# Queue changed for this job from secondary to tertiary on 18th April
dat$queue_type[dat$eventTypeEnum == "driveAssignmentValidateReport" & dat$scheduledFor >= "2021-04-18 12:00:00"] <- "tertiary"
#######################
dat$lcecSiteId <- as.factor(dat$lcecSiteId)
#dat$eventTypeEnum <- as.factor(dat$eventTypeEnum)
dat$queue_type <- as.factor(dat$queue_type)
dat$secs <- dat$milliseconds / 1000
dat <- filter(dat, processorId != -1)
dat$processorId <- as.factor(as.character(dat$processorId))
dat$delay_min <- (as.numeric(dat$executedAt - dat$scheduledFor)) / 60
dat$sched_date <- format(dat$scheduledFor, format = '%Y/%m/%d')
dat$sched_time <- format(dat$scheduledFor, format = '%H:%M:%S')
#dat$sched_daydate <- format(dat$scheduledFor, format = '%Y/%m/%d %a')
dat$sched_day <- format(dat$scheduledFor, format = '%a')
dat$sched_day <- factor(dat$sched_day, ordered = TRUE,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
dat$active <- ifelse(dat$lcecSiteId %in% inactive_sites$Site, "inactive", "active")
idx_rel1 <- which(dat$scheduledFor == "2021/04/18 12:00:00")[1]
idx_rel2 <- which(dat$scheduledFor == "2021/05/06 09:00:00")[1]
dat$period <- c(rep("Before", idx_rel1),
rep("Release1", idx_rel2 - idx_rel1),
rep("Release2", nrow(dat) - idx_rel2))
proc.time() - st
unique(dat$sched_time %>% filter(sched_day == "Tue" & sched_date == "2020/02/11"))
dat$sched_time %>% filter(sched_day == "Tue" & sched_date == "2020/02/11")
dat %>%
filter(sched_day == "Tue" & sched_date == "2020/02/11") %>%
select(sched_time)
dat %>%
filter(sched_day == "Tue" & sched_date == "2020/02/11")
View(dat)
dat %>%
filter(sched_date == "2020/02/11") %>%
select(sched_time)
dat %>%
filter(sched_date == "2020/02/11")
dat %>%
filter(sched_date == "2021/02/11") %>%
select(sched_time)
unique(
dat %>%
filter(sched_date == "2021/02/11") %>%
select(sched_time)
)
str(dat)
dat$scheduledFor[1:10]
str(dat$scheduledFor[1:10] )
str(dat$scheduledFor[1000:1010] )
library(chron)
dat$sched_time[1000:1010]
as.POSIXct(dat$sched_time[1000:1010])
as.POSIXct(dat$sched_time[1000:1010], format = "%H:%M:%S")
dat$sched_time[1000:1010]
dat$scheduledFor[1000:1010]
x <- dat$scheduledFor[1000:1010]
H <- as.integer(format(x, "%H"))
M <- as.integer(format(x, "%M"))
S <- as.integer(format(x, "%S"))
d <- dat$sched_time[1000:1010]
d
substr(d, 4, 5)
as.integer(substr(d, 4, 5))
d <- dat$sched_time[c(1000:1010, 2000:2020)]
d
d <- dat$sched_time[c(1000:1010, 3000:3020)]
d
d <- dat$sched_time[c(1000:1010, 5000:5020)]
d
d <- dat$sched_time[c(1000:1010, 5090:6010)]
d
c(1000:1010, 5090:6010)
dat$sched_time[c(1000:1010, 5090:6010)]
d <- dat$sched_time[c(1000:1010, 5180:5200)]
d
d <- dat$sched_time[c(1000:1010, 5280:5300)]
d <- dat$sched_time[c(1000:1010, 5400:5420)]
d
ifelse(as.integer(substr(d, 4, 5)) >= 30, "30", "00")
paste0(substr(d, 1, 3),
ifelse(as.integer(substr(d, 4, 5)) >= 30, "30", "00"),
substr(d, 6, 8))
dat$sched_time_30 <- paste0(substr(dat$sched_time, 1, 3),
ifelse(as.integer(substr(dat$sched_time, 4, 5)) >= 30, "30", "00"),
substr(dat$sched_time, 6, 8))
dat$sched_time_30 <- paste0(substr(dat$sched_time, 1, 3),
ifelse(as.integer(substr(dat$sched_time, 4, 5)) >= 30, "30", "00"))
by_queue_day_time <- dat %>%
group_by(queue_type, sched_day, sched_time_30)
summ1 <- by_queue_day_time %>%
summarise(count = n())
View(summ1)
sum(summ1$count)
summ1 %>%
ggplot(aes(x = sched_time_30), y = count) +
geom_col(aes(fill = sched_day), position = "dodge")
library(ggplot)
summ1 %>%
ggplot(aes(x = sched_time_30), y = count) +
geom_col(aes(fill = sched_day), position = "dodge")
library(ggplot2)
summ1 %>%
ggplot(aes(x = sched_time_30), y = count) +
geom_col(aes(fill = sched_day), position = "dodge")
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge")
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type) +
scale_fill_brewer("Set1")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type) +
scale_fill_brewer("datk2")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type) +
scale_fill_brewer("Dark2")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type) +
scale_fill_brewer("Set2")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap(~queue_type) +
scale_fill_brewer("Dark2")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
scale_fill_brewer("Dark2") +
facet_wrap(~queue_type)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
scale_fill_brewer("RdYlBu") +
facet_wrap(~queue_type)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap(~queue_type)
#dat$sched_daydate <- format(dat$scheduledFor, format = '%Y/%m/%d %a')
dat$sched_day <- format(dat$scheduledFor, format = '%a')
dat$sched_day <- factor(
dat$sched_day,
#  ordered = TRUE,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
)
dat$sched_time_30 <- paste0(substr(dat$sched_time, 1, 3),
ifelse(as.integer(substr(dat$sched_time, 4, 5)) >= 30, "30", "00"))
by_queue_day_time <- dat %>%
group_by(queue_type, sched_day, sched_time_30)
summ1 <- by_queue_day_time %>%
summarise(count = n())
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type)
library(readxl)
library(rmarkdown)
library(dplyr)
st <- proc.time()
setwd("C:/Users/manish.grewal/git-emdp/emdp/darla")
dat1 <- read.csv("eventmetrics1.csv")
dat2 <- read.csv("eventmetrics2.csv")
inactive_sites <- read_excel("RFC-2373-inactive-site-list.xlsx")
dat <- rbind(dat1, dat2)
dat1 <- dat2 <- NULL
# drop unused cols
dat <-
dat[, c(
"id",
"lcecSiteId",
"processorId",
"campaignId",
"eventTypeEnum",
"scheduledFor",
"executedAt",
"milliseconds"
)]
# Fix date cols
dat$executedAt <-
gsub("^(.{10} [0-9][0-9]:[0-9][0-9])$", "\\1:00", dat$executedAt)
dat$executedAt <-
strptime(dat$executedAt, format = "%d-%m-%Y %H:%M:%S", tz = "America/Los_Angeles")
dat$scheduledFor <-
gsub("^(.{10} [0-9][0-9]:[0-9][0-9])$", "\\1:00", dat$scheduledFor)
dat$scheduledFor <-
strptime(dat$scheduledFor, format = "%d-%m-%Y %H:%M:%S", tz = "America/Los_Angeles")
## add index col
dat <- dat %>%
mutate(index1 = row.names(dat), .before = 1)
#######################
# add queue_type col
#######################
events_critical <-
c(
"welcomeEmail",
"reminderEmail",
"driveAssignment",
"eptest1",
"drive assignment retry",
"reviewerReminderEmail",
"reminder email series",
"campaignDailyMailDelivery",
"thankYouEmail",
"campaignHourlyMailDelivery",
"correctSubmissionEmail"
)
events_secondary <-
c(
"reportDeliver",
"driveAssignmentValidate",
"eptest2",
"notifyNearStart",
"notifyNearDue",
"notifyNearClose",
"notifyClosed",
"validateAnnouncementRecipients",
"validateReminderRecipients",
"bulkload poll",
"reportNow",
"driveAssignmentValidateReport",
"validateReviewerReminderRecipients",
"validateCorrectSubmissionRecipients",
"reminderEmailRetry",
"welcomeEmailRetry",
"reviewerReminderEmailRetry",
"correctSubmissionEmailRetry",
"validateAnnouncementRecipientsUseAssignmentRules",
"validateReminderRecipientsUseAssignmentRules",
"VariableWelcomeEmailRetry",
"VariableReminderEmailRetry",
"VariableReviewerReminderEmailRetry",
"VariableCorrectSubmissionReminderEmailRetry",
"FailedEmailDeliveryReport",
"CumulativeEmailRetry",
"supervisorEmail"
)
events_tertiary <-
c(
"lyris poll",
"lyris gc",
"monitor",
"dailyAdminEmail",
"unitTest",
"dailyLogRotation",
"computeCampaignProgress",
"computeLicenseReports",
"eptest3",
"ContractModulesExceeded"
)
dat$queue_type <- case_when(
dat$eventTypeEnum %in% events_critical ~ "critical",
dat$eventTypeEnum %in% events_secondary ~ "secondary",
dat$eventTypeEnum %in% events_tertiary ~ "tertiary"
)
# Queue changed for this job from secondary to tertiary on 18th April
dat$queue_type[dat$eventTypeEnum == "driveAssignmentValidateReport" &
dat$scheduledFor >= "2021-04-18 12:00:00"] <- "tertiary"
#######################
dat$lcecSiteId <- as.factor(dat$lcecSiteId)
#dat$eventTypeEnum <- as.factor(dat$eventTypeEnum)
dat$queue_type <- as.factor(dat$queue_type)
dat$secs <- dat$milliseconds / 1000
dat <- filter(dat, processorId != -1)
dat$processorId <- as.factor(as.character(dat$processorId))
dat$delay_min <-
(as.numeric(dat$executedAt - dat$scheduledFor)) / 60
dat$sched_date <- format(dat$scheduledFor, format = '%Y/%m/%d')
dat$sched_time <- format(dat$scheduledFor, format = '%H:%M:%S')
#dat$sched_daydate <- format(dat$scheduledFor, format = '%Y/%m/%d %a')
dat$sched_day <- format(dat$scheduledFor, format = '%a')
dat$sched_day <- factor(
dat$sched_day,
ordered = TRUE,
levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
)
dat$sched_time_30 <- paste0(substr(dat$sched_time, 1, 3),
ifelse(as.integer(substr(dat$sched_time, 4, 5)) >= 30, "30", "00"))
dat$active <-
ifelse(dat$lcecSiteId %in% inactive_sites$Site, "inactive", "active")
idx_rel1 <- which(dat$scheduledFor == "2021/04/18 12:00:00")[1]
idx_rel2 <- which(dat$scheduledFor == "2021/05/06 09:00:00")[1]
dat$period <- c(
rep("Before", idx_rel1),
rep("Release1", idx_rel2 - idx_rel1),
rep("Release2", nrow(dat) - idx_rel2)
)
proc.time() - st
render("darla.RMD")
render("darla.RMD")
render("darla.RMD")
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_grid( ~ queue_type) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_grid( ~ queue_type, rows = 3) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_grid( ~ queue_type, cols = 1) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type, cols = 1) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_grid( ~ queue_type) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_grid( ~ queue_type) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(y = sched_time_30, x = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type, ncol = 1) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type, ncol = 1) +
ylab("Scheduled Time") +
ggtitle(title)
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type, ncol = 1) +
ylab("Scheduled Time") +
ggtitle(title) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7)) +
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
#scale_fill_brewer("RdYlBu") +
facet_wrap( ~ queue_type, ncol = 1) +
ylab("Scheduled Time") +
ggtitle(title) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 16)
options(scipen=10000)
st <- proc.time()
summ1 %>%
ggplot(aes(x = sched_time_30, y = count)) +
geom_col(aes(fill = sched_day), position = "dodge") +
facet_wrap( ~ queue_type, ncol = 1) +
xlab("Scheduled Time") +
ggtitle(title) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7))
render("darla.RMD")
View(dat)
plot(summ_cri, "critical")
plot_by_period(summ_cri, "critical")
summ_cri
plot_by_period(summ, "critical")
plot_by_date(summ, "count", "a")
plot_by_date(summ_cri, "count", "a")
plot_by_date <- function(x, y, desc) {
what <- gsub("_", " ", y)
title <- paste("By date:", what, "(", desc, ")")
print(title)
idx_rel1 <- which(x$sched_date == "2021/04/18")
idx_rel2 <- which(x$sched_date == "2021/05/06")
p <- x %>%
ggplot(aes(x = sched_date)) +
geom_col(aes_string(y = y, fill = "sched_day")) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7)) +
#scale_fill_manual(values = cbp1) +
xlab("Date") +
ylab(what) +
ggtitle(title) +
geom_vline(aes(xintercept = c(idx_rel1), color="Rel1"), size=1, linetype="dashed") +
geom_vline(aes(xintercept = c(idx_rel2), color="Rel2"), size=1, linetype="dashed") +
scale_color_manual(name = "Release", values = c(Rel1 = "blue", Rel2 = "black")) +
scale_x_date(breaks = seq(x$sched_date, 1, nrow(x), 2))
print(p)
}
plot_by_date(summ_cri, "count", "a")
plot_by_date <- function(x, y, desc) {
what <- gsub("_", " ", y)
title <- paste("By date:", what, "(", desc, ")")
print(title)
idx_rel1 <- which(x$sched_date == "2021/04/18")
idx_rel2 <- which(x$sched_date == "2021/05/06")
p <- x %>%
ggplot(aes(x = sched_date)) +
geom_col(aes_string(y = y, fill = "sched_day")) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7)) +
#scale_fill_manual(values = cbp1) +
xlab("Date") +
ylab(what) +
ggtitle(title) +
geom_vline(aes(xintercept = c(idx_rel1), color="Rel1"), size=1, linetype="dashed") +
geom_vline(aes(xintercept = c(idx_rel2), color="Rel2"), size=1, linetype="dashed") +
scale_color_manual(name = "Release", values = c(Rel1 = "blue", Rel2 = "black")) +
scale_x_date(breaks = x$sched_date[seq(1, nrow(x), 2)])
print(p)
}
plot_by_date(summ_cri, "count", "a")
p <- x %>%
ggplot(aes(x = sched_date)) +
geom_col(aes_string(y = y, fill = "sched_day")) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7)) +
#scale_fill_manual(values = cbp1) +
xlab("Date") +
ylab(what) +
ggtitle(title) +
geom_vline(aes(xintercept = c(idx_rel1), color="Rel1"), size=1, linetype="dashed") +
geom_vline(aes(xintercept = c(idx_rel2), color="Rel2"), size=1, linetype="dashed") +
scale_color_manual(name = "Release", values = c(Rel1 = "blue", Rel2 = "black")) +
scale_x_discrete(breaks = x$sched_date[seq(1, nrow(x), 2)])
plot_by_date <- function(x, y, desc) {
what <- gsub("_", " ", y)
title <- paste("By date:", what, "(", desc, ")")
print(title)
idx_rel1 <- which(x$sched_date == "2021/04/18")
idx_rel2 <- which(x$sched_date == "2021/05/06")
p <- x %>%
ggplot(aes(x = sched_date)) +
geom_col(aes_string(y = y, fill = "sched_day")) +
theme(axis.text.x = element_text(angle = 90, size = 11, vjust = 0.7)) +
#scale_fill_manual(values = cbp1) +
xlab("Date") +
ylab(what) +
ggtitle(title) +
geom_vline(aes(xintercept = c(idx_rel1), color="Rel1"), size=1, linetype="dashed") +
geom_vline(aes(xintercept = c(idx_rel2), color="Rel2"), size=1, linetype="dashed") +
scale_color_manual(name = "Release", values = c(Rel1 = "blue", Rel2 = "black")) +
scale_x_discrete(breaks = x$sched_date[seq(1, nrow(x), 2)])
print(p)
}
plot_by_date(summ_cri, "count", "a")
scale_x_discrete(breaks = x$sched_date[seq(1, nrow(x), 2)])
