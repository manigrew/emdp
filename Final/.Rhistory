str(weather)
library(nycflights13)
library(dplyr)
attach(weather)
data(package = "nycflights13")
str(weather)
plot(time_hour, visib)
plot(time_hour, visib, type = "l")
plot(time_hour[30,], visib[30,], type = "l")
plot(time_hour[30], visib[30], type = "l")
plot(time_hour[30], temp[30], type = "l")
time_hour[30]
time_hour[30,]
time_hour[1:30]
plot(time_hour[1:30], temp[1:30], type = "l")
plot(time_hour[1:60], temp[1:60], type = "l")
for(r in 1:12) plot(time_hour[1:r*30], temp[1:r*30], type = "l")
for(r in 1:12) plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
sleep(2)
}
wait(2)
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
read(x)
}
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
readline(x)
}
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
readline()
}
time_hour[1:(2*30)]
for(r in 1:12){
plot(time_hour[r:(r*30)], temp[r:(r*30)], type = "l")
readline()
}
24*30*12
filter(weather, month == 1)
tail(filter(weather, month == 1))
24*31
tail(filter(weather, month == 1, day == 30))
tail(filter(weather, month == 1, day == 20))
tail(filter(weather, month == 2, day == 20))
group_by(filter(weather, month == 2, day == 20), day)
data1 <- filter(weather, month == 2, day == 20)
View(data1)
72*
?weather
72*
?weather
72*
??weather
72*
weather
72*365
length(weather)
nrow(weather)
inc <- 72*30
for(r in seq(1, nrow(weather), by = inc) {}
x <- r + inc
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
24*30*12
24*31
group_by(filter(weather, month == 2, day == 20), day)
data1 <- filter(weather, month == 2, day == 20)
View(data1)
72*
weather
72*365
for(r in seq(1, nrow(weather), by = inc) {
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
}
print(r, x)
print(x)
print(r)
inc <- 72*30
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(r)
print(x)
#plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
group_by(weather, month)
data2 <- group_by(weather, month)
count(data2)
View(weather)
72*
data1 <- arrange(weather, month, day, hour)
72*
data1 <- arrange(weather, month, day, hour)
data1 <- arrange(weather, month, day, hour)
View(data1)
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
#plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
data1 <- arrange(weather, month, day, hour)
weather <- arrange(weather, month, day, hour)
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
}
View(weather)
windspeed
data2 <- mutate(weather, wind_direction = int(wind_dir/22.5))
data2 <- mutate(weather, wind_direction = as.numeric(wind_dir/22.5))
data2$wind_direction
data2 <- mutate(weather, wind_direction = as.numeric(wind_dir//22.5))
data2 <- mutate(weather, wind_direction = as.integer(wind_dir/22.5))
data2$wind_direction
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW","N")
data2 <- mutate(weather, wind_direction = dir[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_direction = dir[[as.integer(wind_dir/22.5)]])
data2 <- mutate(weather, wind_direction = dirs[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = dirs[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = [as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = as.integer(wind_dir/22.5))
wind_directions = factor(wind_directions, levels = dirs)
wind_directions = factor(data2$wind_directions, levels = dirs)
wind_directions = factor(data2$wind_directions, levels = dirs)
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
wind_directions = factor(data2$wind_directions, levels = dirs)
data2$wind_direction
data2$wind_directions
wind_directions = factor(data2$wind_directions, levels = dirs, labels = dirs)
data2$wind_directions
wind_directions
wind_directions = lapply(data2$wind_directions, factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, as.factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, factor, levels = dirs, labels = dirs)
wind_directions
wind_directions = lapply(data2$wind_directions, factor)
wind_directions
str(wind_directions)
str(wind_directions)
data2$wind_directions
data2 <- mutate(weather, wind_directions = as.character(as.integer(wind_dir/22.5)))
data2$wind_directions
wind_directions = lapply(data2$wind_directions, factor)
wind_directions
wind_directions = factor(data2$wind_directions)
wind_directions
str(wind_directions, labels = dirs)
wind_directions
factor(wind_directions, labels = dirs)
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW", "N")
factor(wind_directions, labels = dirs)
.libPaths()
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 4)
x <- dat
seq(1, nrow(x), 10
seq(1, nrow(x), 10)
library(dplyr)
library(dplyr)
library(ggplot2)
setwd("C:/Users/manish.grewal/emdp/R/RocketFuel")
dat <- read.csv("RocketFuel.csv")
dat <- read.csv("RocketFuel.csv")
## Convert to factors
dat$ftest <- factor(dat$test, labels = c("control", "test"))
## Convert to factors
dat$ftest <- factor(dat$test, labels = c("control", "test"))
dat$fconverted <- factor(dat$converted, labels = c("not-converted", "converted"))
x <- dat
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = seq(min(x$tot_impr) - min(x$tot_impr) %% 10, max(x$tot_impr) + 10, 10), dig.lab = 5)
x$tot_impr_bin_f <- cut(x$tot_impr, breaks = c(0, unique(quantile(x$tot_impr, probs = seq(0, 1, .05)))), dig.lab = 5)
summ_f <- x %>%
group_by(tot_impr_bin_w, ftest) %>%
summarise(conversion_rate = mean(converted) * 100, count = n())
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, nrow(x), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
seq(1, nrow(x), 10)
nrow(unique(x$tot_impr_bin_w))
unique(x$tot_impr_bin_w)
length(unique(x$tot_impr_bin_w))
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 10)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 2)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
x <- dat1
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = c(0, unique(quantile(x$tot_impr, probs = seq(0, 1, .05)))), dig.lab = 5)
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = seq(min(x$tot_impr) - min(x$tot_impr) %% 10, max(x$tot_impr) + 10, 10), dig.lab = 5)
summ <- x %>%
group_by(tot_impr_bin_w, ftest) %>%
summarise(conversion_rate = mean(converted) * 100, count = n())
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, nrow(x), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 10)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)]
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = sort(x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)])) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity")
View(p)
View(p)
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
#scale_x_discrete(breaks = sort(x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)])) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 3)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
every_nth = function(n) {
return(function(x) {x[c(TRUE, rep(FALSE, n - 1))]})
}
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 3)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 4)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .03)
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .05))
quantile(x$tot_impr, probs = seq(0, 1, .001))
dat <- read.csv("https://raw.githubusercontent.com/manishgrewal/ml/master/risk_levels_dupont_162095_2.csv")
View(dat)
dat[is.na(dat)]
dat[is.na(dat)] <- 2
dat <- as.factor(dat)
dat <- read.csv("https://raw.githubusercontent.com/manishgrewal/ml/master/risk_levels_dupont_162095_2.csv")
View(dat)
dat[is.na(dat)] <- 2
reg <- lm(Risk ~ ., data = dat)
View(reg)
summary(reg)
library(QuantPsyc)
vif(reg)
library(car)
vif(reg)
sort(abs(vif(reg)))
step <- step(reg, direction = "backward")
summary(reg)
step <- step(reg, direction = "backward")
attach(dat)
dat2 <- dat[, ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk]
dat2 <- dat[, c(ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk)]
dat2 <- data.frame(ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk)
reg2 <- lm(Risk ~ ., data = dat2)
detach(dat)
detach(dat)
reg2 <- lm(Risk ~ ., data = dat2)
summary(reg2)
library(readxl)
dataset <- read_excel("~/risk_levels_dupont_DUP929_10Feb_v2_162095.xlsx")
# remove blank rows at end
dataset <- dataset[1:584,]
# remove userinfo columns
dataset <- dataset[,c(1,2,23:65)]
str(dataset)
# Shorten column headings
names(dataset) <- gsub("^Question ([0-9.]+).*$", "Question\\1", names(dataset))
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
str(dataset)
# Replace missing values with empty string
dataset[is.na(dataset)] <- ""
esquisse::esquisser('dataset')
dataset <- read_excel("~/risk_levels_dupont_DUP929_10Feb_v2_162095.xlsx")
# remove blank rows at end
dataset <- dataset[1:584,]
# remove userinfo columns
dataset <- dataset[,c(1,2,23:65)]
# Shorten column headings
names(dataset) <- gsub("^Question ([0-9.]+).*$", "Question\\1", names(dataset))
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
esquisse::esquisser('dataset')
dat <- lapply(dataset, function(x) max(length(x)))
dat
dat <- lapply(dataset, function(x) max(nchar(x)))
dat
df <- data.frame(A = letters, B = 1:26, C = sample(26, 26))
df
lapply(df, function(x) print(x))
lapply(df, function(x) nchar(x))
lapply(df, function(x) max(nchar(x)))
sapply(df, function(x) max(nchar(x)))
apply(df, function(x) max(nchar(x)))
apply(df, function(x) x*x)
lapply(df, function(x) x*x)
lapply(df, function(x) x+x)
lapply(df, function(x) ifelse(is.numeric(x), x+x, x)
lapply(df, function(x) ifelse(is.numeric(x), x+x, x))
df
lapply(df, function(x) ifelse(is.numeric(x), x*x, paste(x, x)))
lapply(df, function(x) {ifelse(is.numeric(x), x*x, paste(x, x))})
lapply(df, function(x) {ifelse(is.numeric(x), x*x, paste(x, x)); print(x)})
x <- df
ifelse(is.numeric(x), x*x, paste(x, x))
str(dataset)
install.packages("pdflatex")
install.packages("pdflatex")
Sys.which("pdflatex")
library(readxl)
library(car)
library(caret)
library(ROSE)
library(pROC)
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("C:/Users/manish.grewal/emdp/R/Final")
xlsx <- read_excel("IMB469-XLS-ENG.xlsx")
data <- xlsx[,c(4:16, 19)]
str(data)
names(data)
data[,14] <- factor(data[14])
str(data)
data[, 14] <- lapply(data[, 14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
data <- xlsx[,c(4:16, 19)]
data[, 14] <- lapply(data[, 14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
set.seed(123)
myindex <- createDataPartition(data$DefaulterFlag, p = 0.6, list = FALSE)
traindata <- data[c(myindex),]
testdata <- data[-c(myindex),]
train <- traindata
test <- testdata
over <- ovun.sample(DefaulterFlag ~ ., data = train, method = "over", seed = 123,
N = table(train$DefaulterFlag)[2] * 2)$data
under <- ovun.sample(DefaulterFlag ~ ., data = train, method = "under", seed = 123,
N = table(train$DefaulterFlag)[1] * 2)$data
both <- ovun.sample(DefaulterFlag ~ ., data = train, method = "both", seed = 123,
p = 0.5 )$data
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 500, improve = .01)
train <- as.data.frame(over)
set.seed(123)
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 500, improve = .01)
set.seed(123)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 6, ntree = 500)
plot(reg8)
reg8_class <- predict(reg8, newdata = test, type = "class")
summary(reg8_class)
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
data[, 6:14] <- lapply(data[, 6:14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
set.seed(123)
myindex <- createDataPartition(data$DefaulterFlag, p = 0.8, list = FALSE)
traindata <- data[c(myindex),]
testdata <- data[-c(myindex),]
train <- traindata
test <- testdata
table(train$DefaulterFlag)
over <- ovun.sample(DefaulterFlag ~ ., data = train, method = "over", seed = 123,
N = table(train$DefaulterFlag)[2] * 2)$data
under <- ovun.sample(DefaulterFlag ~ ., data = train, method = "under", seed = 123,
N = table(train$DefaulterFlag)[1] * 2)$data
both <- ovun.sample(DefaulterFlag ~ ., data = train, method = "both", seed = 123,
p = 0.5 )$data
train <- as.data.frame(over)
set.seed(123)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 6, ntree = 500)
data[, 7:14] <- lapply(data[, 7:14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
data <- xlsx[,c(4:16, 19)]
data[, 7:14] <- lapply(data[, 7:14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
set.seed(123)
myindex <- createDataPartition(data$DefaulterFlag, p = 0.8, list = FALSE)
traindata <- data[c(myindex),]
testdata <- data[-c(myindex),]
train <- traindata
test <- testdata
table(train$DefaulterFlag)
over <- ovun.sample(DefaulterFlag ~ ., data = train, method = "over", seed = 123,
N = table(train$DefaulterFlag)[2] * 2)$data
under <- ovun.sample(DefaulterFlag ~ ., data = train, method = "under", seed = 123,
N = table(train$DefaulterFlag)[1] * 2)$data
both <- ovun.sample(DefaulterFlag ~ ., data = train, method = "both", seed = 123,
p = 0.5 )$data
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 6, ntree = 500)
reg8_class <- predict(reg8, newdata = test, type = "class")
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
train <- under
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 500, improve = .01)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 2, ntree = 500)
reg8_class <- predict(reg8, newdata = test, type = "class")
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
train <- both
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 300, improve = .01)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 6, ntree = 300)
reg8_class <- predict(reg8, newdata = test, type = "prob")
reg8_class <- predict(reg8, newdata = test, type = "class")
pred <- as.factor(ifelse(reg8_class[,1] > 0.485, 1, 0))
confusionMatrix(pred, test$DefaulterFlag, positive = "1")
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
#data[, 1:5]  <- lapply(data[, 1:5], scale)
data[,1] <- data[,1] / 10
data[,2] <- (data[,2] - min(data[,2])) / (max(data[,2]) - min(data[,2]))
data <- xlsx[,c(4:16, 19)]
#data[, 1:5]  <- lapply(data[, 1:5], scale)
data[,1] <- (data[,1] - min(data[,1])) / (max(data[,1]) - min(data[,1]))
data[,2] <- (data[,2] - min(data[,2])) / (max(data[,2]) - min(data[,2]))
data[,3] <- (data[,3] - min(data[,3])) / (max(data[,3]) - min(data[,3]))
data[,4] <- (data[,4] - min(data[,4])) / (max(data[,4]) - min(data[,4]))
data[,5] <- (data[,5] - min(data[,5])) / (max(data[,5]) - min(data[,5]))
data[,6] <- (data[,6] - min(data[,6])) / (max(data[,6]) - min(data[,6]))
data[, 7:14] <- lapply(data[, 7:14], function(x) {recode(x, "0=0; 1=1", as.factor = TRUE)})
str(data)
set.seed(123)
myindex <- createDataPartition(data$DefaulterFlag, p = 0.8, list = FALSE)
traindata <- data[c(myindex),]
testdata <- data[-c(myindex),]
train <- traindata
test <- testdata
table(train$DefaulterFlag)
over <- ovun.sample(DefaulterFlag ~ ., data = train, method = "over", seed = 123,
N = table(train$DefaulterFlag)[2] * 2)$data
under <- ovun.sample(DefaulterFlag ~ ., data = train, method = "under", seed = 123,
N = table(train$DefaulterFlag)[1] * 2)$data
both <- ovun.sample(DefaulterFlag ~ ., data = train, method = "both", seed = 123,
p = 0.5 )$data
set.seed(123)
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 500, improve = .01)
train <- as.data.frame(train)
tuneRF(train[,-14], train[,14],
stepFactor = 2, plot = TRUE, ntreeTry = 500, improve = .01)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 2, ntree = 500)
reg8_class <- predict(reg8, newdata = test, type = "class")
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
train <- as.data.frame(over)
reg8 <- randomForest(DefaulterFlag ~ ., data = train, mtry = 6, ntree = 500)
reg8_class <- predict(reg8, newdata = test, type = "class")
confusionMatrix(reg8_class, test$DefaulterFlag, positive = "1")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 7, fig.height = 4)
#Check for missing values
paste("Is any NA: ")
#Check for missing values
paste0("Is any NA: ")
setwd("C:/Users/manish.grewal/emdp/R/Final")
xlsx <- read_excel("IMB469-XLS-ENG.xlsx")
# Removing not recommended columns
xlsx <- xlsx[, -c(1:3,17,18,20)]
#Check for missing values
paste0("Is any NA: ")
any(is.na(xlsx))
#Check for null values
paste0("Is any null: ")
any(is.null(xlsx))
#Check for missing values
paste0("Is any NA: ", any(is.na(xlsx)))
