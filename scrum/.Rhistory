data3
data3 <- filter(weather, temp == max(temp))
data3
max(temp)
max(weather$temp)
max(na.rm = TRUE, weather$temp)
data3
print(data3)
data3 <- filter(weather, temp == max(temp, na.rm = TRUE))
str(data3)
print(data3)
data3
```{r}
19503    + 6611
str(weather)
library(nycflights13)
library(dplyr)
attach(weather)
data(package = "nycflights13")
str(weather)
plot(time_hour, visib)
plot(time_hour, visib, type = "l")
plot(time_hour[30,], visib[30,], type = "l")
plot(time_hour[30], visib[30], type = "l")
plot(time_hour[30], temp[30], type = "l")
time_hour[30]
time_hour[30,]
time_hour[1:30]
plot(time_hour[1:30], temp[1:30], type = "l")
plot(time_hour[1:60], temp[1:60], type = "l")
for(r in 1:12) plot(time_hour[1:r*30], temp[1:r*30], type = "l")
for(r in 1:12) plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
sleep(2)
}
wait(2)
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
read(x)
}
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
readline(x)
}
for(r in 1:12){
plot(time_hour[1:(r*30)], temp[1:(r*30)], type = "l")
readline()
}
time_hour[1:(2*30)]
for(r in 1:12){
plot(time_hour[r:(r*30)], temp[r:(r*30)], type = "l")
readline()
}
24*30*12
filter(weather, month == 1)
tail(filter(weather, month == 1))
24*31
tail(filter(weather, month == 1, day == 30))
tail(filter(weather, month == 1, day == 20))
tail(filter(weather, month == 2, day == 20))
group_by(filter(weather, month == 2, day == 20), day)
data1 <- filter(weather, month == 2, day == 20)
View(data1)
72*
?weather
72*
?weather
72*
??weather
72*
weather
72*365
length(weather)
nrow(weather)
inc <- 72*30
for(r in seq(1, nrow(weather), by = inc) {}
x <- r + inc
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
24*30*12
24*31
group_by(filter(weather, month == 2, day == 20), day)
data1 <- filter(weather, month == 2, day == 20)
View(data1)
72*
weather
72*365
for(r in seq(1, nrow(weather), by = inc) {
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
}
print(r, x)
print(x)
print(r)
inc <- 72*30
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(r)
print(x)
#plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
group_by(weather, month)
data2 <- group_by(weather, month)
count(data2)
View(weather)
72*
data1 <- arrange(weather, month, day, hour)
72*
data1 <- arrange(weather, month, day, hour)
data1 <- arrange(weather, month, day, hour)
View(data1)
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
#plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
data1 <- arrange(weather, month, day, hour)
weather <- arrange(weather, month, day, hour)
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
plot(time_hour[r:x], temp[r:x], type = "l")
#readline()
}
for(r in seq(1, nrow(weather), by = inc)) {
x <- r + inc
print(paste(r,x))
plot(time_hour[r:x], temp[r:x], type = "l")
readline()
}
View(weather)
windspeed
data2 <- mutate(weather, wind_direction = int(wind_dir/22.5))
data2 <- mutate(weather, wind_direction = as.numeric(wind_dir/22.5))
data2$wind_direction
data2 <- mutate(weather, wind_direction = as.numeric(wind_dir//22.5))
data2 <- mutate(weather, wind_direction = as.integer(wind_dir/22.5))
data2$wind_direction
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW","N")
data2 <- mutate(weather, wind_direction = dir[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_direction = dir[[as.integer(wind_dir/22.5)]])
data2 <- mutate(weather, wind_direction = dirs[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = dirs[as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = [as.integer(wind_dir/22.5)])
data2 <- mutate(weather, wind_directions = as.integer(wind_dir/22.5))
wind_directions = factor(wind_directions, levels = dirs)
wind_directions = factor(data2$wind_directions, levels = dirs)
wind_directions = factor(data2$wind_directions, levels = dirs)
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")
wind_directions = factor(data2$wind_directions, levels = dirs)
data2$wind_direction
data2$wind_directions
wind_directions = factor(data2$wind_directions, levels = dirs, labels = dirs)
data2$wind_directions
wind_directions
wind_directions = lapply(data2$wind_directions, factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, as.factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, factor(levels = dirs, labels = dirs))
wind_directions = lapply(data2$wind_directions, factor, levels = dirs, labels = dirs)
wind_directions
wind_directions = lapply(data2$wind_directions, factor)
wind_directions
str(wind_directions)
str(wind_directions)
data2$wind_directions
data2 <- mutate(weather, wind_directions = as.character(as.integer(wind_dir/22.5)))
data2$wind_directions
wind_directions = lapply(data2$wind_directions, factor)
wind_directions
wind_directions = factor(data2$wind_directions)
wind_directions
str(wind_directions, labels = dirs)
wind_directions
factor(wind_directions, labels = dirs)
dirs = c("N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW", "N")
factor(wind_directions, labels = dirs)
.libPaths()
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 4)
x <- dat
seq(1, nrow(x), 10
seq(1, nrow(x), 10)
library(dplyr)
library(dplyr)
library(ggplot2)
setwd("C:/Users/manish.grewal/emdp/R/RocketFuel")
dat <- read.csv("RocketFuel.csv")
dat <- read.csv("RocketFuel.csv")
## Convert to factors
dat$ftest <- factor(dat$test, labels = c("control", "test"))
## Convert to factors
dat$ftest <- factor(dat$test, labels = c("control", "test"))
dat$fconverted <- factor(dat$converted, labels = c("not-converted", "converted"))
x <- dat
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = seq(min(x$tot_impr) - min(x$tot_impr) %% 10, max(x$tot_impr) + 10, 10), dig.lab = 5)
x$tot_impr_bin_f <- cut(x$tot_impr, breaks = c(0, unique(quantile(x$tot_impr, probs = seq(0, 1, .05)))), dig.lab = 5)
summ_f <- x %>%
group_by(tot_impr_bin_w, ftest) %>%
summarise(conversion_rate = mean(converted) * 100, count = n())
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, nrow(x), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
seq(1, nrow(x), 10)
nrow(unique(x$tot_impr_bin_w))
unique(x$tot_impr_bin_w)
length(unique(x$tot_impr_bin_w))
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 10)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ_f, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 2)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
x <- dat1
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = c(0, unique(quantile(x$tot_impr, probs = seq(0, 1, .05)))), dig.lab = 5)
x$tot_impr_bin_w <- cut(x$tot_impr, breaks = seq(min(x$tot_impr) - min(x$tot_impr) %% 10, max(x$tot_impr) + 10, 10), dig.lab = 5)
summ <- x %>%
group_by(tot_impr_bin_w, ftest) %>%
summarise(conversion_rate = mean(converted) * 100, count = n())
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, nrow(x), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = seq(1, length(unique(x$tot_impr_bin_w)), 10)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 10)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)]
ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = sort(x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)])) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity")
View(p)
View(p)
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
#scale_x_discrete(breaks = sort(x$tot_impr_bin_w[seq(1, length(unique(x$tot_impr_bin_w)), 2)])) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 3)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
every_nth = function(n) {
return(function(x) {x[c(TRUE, rep(FALSE, n - 1))]})
}
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 3)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
p <- ggplot(summ, aes(tot_impr_bin_w, conversion_rate, fill = ftest)) +
geom_bar(stat = "identity") +
scale_x_discrete(breaks = every_nth(n = 4)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .03)
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .03))
quantile(x$tot_impr, probs = seq(0, 1, .05))
quantile(x$tot_impr, probs = seq(0, 1, .001))
dat <- read.csv("https://raw.githubusercontent.com/manishgrewal/ml/master/risk_levels_dupont_162095_2.csv")
View(dat)
dat[is.na(dat)]
dat[is.na(dat)] <- 2
dat <- as.factor(dat)
dat <- read.csv("https://raw.githubusercontent.com/manishgrewal/ml/master/risk_levels_dupont_162095_2.csv")
View(dat)
dat[is.na(dat)] <- 2
reg <- lm(Risk ~ ., data = dat)
View(reg)
summary(reg)
library(QuantPsyc)
vif(reg)
library(car)
vif(reg)
sort(abs(vif(reg)))
step <- step(reg, direction = "backward")
summary(reg)
step <- step(reg, direction = "backward")
attach(dat)
dat2 <- dat[, ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk]
dat2 <- dat[, c(ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk)]
dat2 <- data.frame(ï..ID, Question.5, Question.8, Question.10, Question.14,
Question.15, Question.16, Question.19, Risk)
reg2 <- lm(Risk ~ ., data = dat2)
detach(dat)
detach(dat)
reg2 <- lm(Risk ~ ., data = dat2)
summary(reg2)
library(readxl)
dataset <- read_excel("~/risk_levels_dupont_DUP929_10Feb_v2_162095.xlsx")
# remove blank rows at end
dataset <- dataset[1:584,]
# remove userinfo columns
dataset <- dataset[,c(1,2,23:65)]
str(dataset)
# Shorten column headings
names(dataset) <- gsub("^Question ([0-9.]+).*$", "Question\\1", names(dataset))
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
str(dataset)
# Replace missing values with empty string
dataset[is.na(dataset)] <- ""
esquisse::esquisser('dataset')
dataset <- read_excel("~/risk_levels_dupont_DUP929_10Feb_v2_162095.xlsx")
# remove blank rows at end
dataset <- dataset[1:584,]
# remove userinfo columns
dataset <- dataset[,c(1,2,23:65)]
# Shorten column headings
names(dataset) <- gsub("^Question ([0-9.]+).*$", "Question\\1", names(dataset))
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
# name the first column
names(dataset)[1] <- 'rownum'
# handle duplicate column names (e.g Question3)
names(dataset) <- make.unique(names(dataset), sep='-')
str(dataset)
esquisse::esquisser('dataset')
dat <- lapply(dataset, function(x) max(length(x)))
dat
dat <- lapply(dataset, function(x) max(nchar(x)))
dat
df <- data.frame(A = letters, B = 1:26, C = sample(26, 26))
df
lapply(df, function(x) print(x))
lapply(df, function(x) nchar(x))
lapply(df, function(x) max(nchar(x)))
sapply(df, function(x) max(nchar(x)))
apply(df, function(x) max(nchar(x)))
apply(df, function(x) x*x)
lapply(df, function(x) x*x)
lapply(df, function(x) x+x)
lapply(df, function(x) ifelse(is.numeric(x), x+x, x)
lapply(df, function(x) ifelse(is.numeric(x), x+x, x))
df
lapply(df, function(x) ifelse(is.numeric(x), x*x, paste(x, x)))
lapply(df, function(x) {ifelse(is.numeric(x), x*x, paste(x, x))})
lapply(df, function(x) {ifelse(is.numeric(x), x*x, paste(x, x)); print(x)})
x <- df
ifelse(is.numeric(x), x*x, paste(x, x))
str(dataset)
install.packages("pdflatex")
install.packages("pdflatex")
Sys.which("pdflatex")
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("C:/Users/manish.grewal/emdp/R/scrum")
dat <- read.csv("Scrum.csv")
dat$Sprint <- sub("^20", "", dat$Sprint) # 2020-01 to 20-01
#dat$Sprint
#str(dat)
dat <- dat %>%
filter(Team != "Gladiators", PI != "19-4")
#######################################################################
# by sprint by team + PI + PI avg delivered - take 2
#######################################################################
by_pi_team = group_by(dat, PI, Team)
summ <- summarise(by_pi_team, mDelivered = mean(Delivered), mDelpct = mean(Delpct))
dat <- left_join(dat, summ, by = c("PI", "Team"))
my_colors = c("Delpct" = "Green", "Committed" = "Blue", "Delivered" = "Red")
my_linetype = c("Avg. Delpct" = "dashed", "Avg. Delivered" = "longdash")
outdir = "storypoints-charts"
ggplot(dat) +
geom_line(aes(Sprint, Delivered, group = Team, color="Delivered")) +
geom_point(aes(Sprint, Delivered, color="Delivered")) +
geom_line(aes(Sprint, Committed, group = Team, color="Committed")) +
geom_point(aes(Sprint, Committed, color="Committed")) +
geom_line(aes(Sprint, Delpct, group = Team, color="Delpct")) +
geom_point(aes(Sprint, Delpct, color="Delpct")) +
scale_color_manual(name = "", values = my_colors) + # legend
# PI background
geom_rect(xmin = 1, ymin = 0, xmax = 5.5, ymax = 100, fill = "#00000001") +
#geom_rect(xmin = 5.5, ymin = 0, xmax = 10.5, ymax = 100, fill = "#33cccc01") +
geom_rect(xmin = 10.5, ymin = 0, xmax = 15.5, ymax = 100, fill = "#00000001") +
geom_line(aes(Sprint, mDelivered, group = Team, linetype = "Avg. Delivered"), color = "Black", size = 0.5) + # Average by PI
geom_line(aes(Sprint, mDelpct, group = Team, linetype = "Avg. Delpct"), color = "Black", size = 0.5) + # Average by PI
scale_linetype_manual(name = "", values = my_linetype) + # legend
facet_wrap(~Team) +
theme_bw() +
theme(legend.position = "top") +
scale_y_continuous(breaks = seq(0, 100, 10)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Committed, Delivered, Delpct(%)")
ggsave("all-teams.png", path = outdir)
#######################################################################
# Individual teams
#######################################################################
for (team in unique(dat$Team)) {
curr <- filter(dat, Team == team)
ggplot(curr) +
geom_line(aes(Sprint, Delivered, group = Team, color="Delivered")) +
geom_point(aes(Sprint, Delivered, color="Delivered")) +
geom_line(aes(Sprint, Committed, group = Team, color="Committed")) +
geom_point(aes(Sprint, Committed, color="Committed")) +
geom_line(aes(Sprint, Delpct, group = Team, color="Delpct")) +
geom_point(aes(Sprint, Delpct, color="Delpct")) +
scale_color_manual(name = "", values = my_colors) + # legend
# PI background
geom_rect(xmin = 1, ymin = 0, xmax = 5.5, ymax = 100, fill = "#00000001") +
#geom_rect(xmin = 5.5, ymin = 0, xmax = 10.5, ymax = 100, fill = "#33cccc01") +
geom_rect(xmin = 10.5, ymin = 0, xmax = 15.5, ymax = 100, fill = "#00000001") +
geom_line(aes(Sprint, mDelivered, group = Team, linetype = "Avg. Delivered"), color = "Black", size = 0.5) + # Average by PI
geom_line(aes(Sprint, mDelpct, group = Team, linetype = "Avg. Delpct"), color = "Black", size = 0.5) + # Average by PI
scale_linetype_manual(name = "", values = my_linetype) + # legend
#facet_wrap(~Team) +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
ggtitle(team) +
scale_y_continuous(breaks = seq(0, 100, 10))# +
#theme(axis.text.x = element_text(angle = 90))
ggsave(paste0(team, ".png"), path = outdir)
#readline()
}
library(dplyr)
library(tidyr)
library(ggplot2)
setwd("C:/Users/manish.grewal/emdp/R/scrum")
dat <- read.csv("Scrum.csv")
dat$Sprint <- sub("^20", "", dat$Sprint) # 2020-01 to 20-01
#dat$Sprint
#str(dat)
dat <- dat %>%
filter(Team != "Gladiators", PI != "19-4")
#######################################################################
# by sprint by team + PI + PI avg delivered - take 2
#######################################################################
by_pi_team = group_by(dat, PI, Team)
summ <- summarise(by_pi_team, mDelivered = mean(Delivered), mDelpct = mean(Delpct))
dat <- left_join(dat, summ, by = c("PI", "Team"))
my_colors = c("Delpct" = "Green", "Committed" = "Blue", "Delivered" = "Red")
my_linetype = c("Avg. Delpct" = "dashed", "Avg. Delivered" = "longdash")
outdir = "storypoints-charts"
ggplot(dat) +
geom_line(aes(Sprint, Delivered, group = Team, color="Delivered")) +
geom_point(aes(Sprint, Delivered, color="Delivered")) +
geom_line(aes(Sprint, Committed, group = Team, color="Committed")) +
geom_point(aes(Sprint, Committed, color="Committed")) +
geom_line(aes(Sprint, Delpct, group = Team, color="Delpct")) +
geom_point(aes(Sprint, Delpct, color="Delpct")) +
scale_color_manual(name = "", values = my_colors) + # legend
# PI background
geom_rect(xmin = 1, ymin = 0, xmax = 5.5, ymax = 100, fill = "#00000001") +
#geom_rect(xmin = 5.5, ymin = 0, xmax = 10.5, ymax = 100, fill = "#33cccc01") +
geom_rect(xmin = 10.5, ymin = 0, xmax = 15.5, ymax = 100, fill = "#00000001") +
geom_line(aes(Sprint, mDelivered, group = Team, linetype = "Avg. Delivered"), color = "Black", size = 0.5) + # Average by PI
geom_line(aes(Sprint, mDelpct, group = Team, linetype = "Avg. Delpct"), color = "Black", size = 0.5) + # Average by PI
scale_linetype_manual(name = "", values = my_linetype) + # legend
facet_wrap(~Team) +
theme_bw() +
theme(legend.position = "top") +
scale_y_continuous(breaks = seq(0, 100, 10)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Committed, Delivered, Delpct(%)")
ggsave("all-teams.png", path = outdir)
#######################################################################
# Individual teams
#######################################################################
for (team in unique(dat$Team)) {
curr <- filter(dat, Team == team)
ggplot(curr) +
geom_line(aes(Sprint, Delivered, group = Team, color="Delivered")) +
geom_point(aes(Sprint, Delivered, color="Delivered")) +
geom_line(aes(Sprint, Committed, group = Team, color="Committed")) +
geom_point(aes(Sprint, Committed, color="Committed")) +
geom_line(aes(Sprint, Delpct, group = Team, color="Delpct")) +
geom_point(aes(Sprint, Delpct, color="Delpct")) +
scale_color_manual(name = "", values = my_colors) + # legend
# PI background
geom_rect(xmin = 1, ymin = 0, xmax = 5.5, ymax = 100, fill = "#00000001") +
#geom_rect(xmin = 5.5, ymin = 0, xmax = 10.5, ymax = 100, fill = "#33cccc01") +
geom_rect(xmin = 10.5, ymin = 0, xmax = 15.5, ymax = 100, fill = "#00000001") +
geom_line(aes(Sprint, mDelivered, group = Team, linetype = "Avg. Delivered"), color = "Black", size = 0.5) + # Average by PI
geom_line(aes(Sprint, mDelpct, group = Team, linetype = "Avg. Delpct"), color = "Black", size = 0.5) + # Average by PI
scale_linetype_manual(name = "", values = my_linetype) + # legend
#facet_wrap(~Team) +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
ggtitle(team) +
scale_y_continuous(breaks = seq(0, 100, 10))# +
#theme(axis.text.x = element_text(angle = 90))
ggsave(paste0(team, ".png"), path = outdir)
#readline()
}
